{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mehdi\\\\Desktop\\\\Gallery Organizer\\\\ai-image-gallery\\\\frontend\\\\src\\\\pages\\\\TrashPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Navbar from '../components/NavbarGallery';\nimport Sidebar from '../components/SidebarFav';\nimport ImageCardTrash from '../components/ImageCardTrash'; // Import ImageCardTrash component\nimport '../styles/Gallery.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrashPage = () => {\n  _s();\n  const [images, setImages] = useState([]); // All images\n  const [filteredImages, setFilteredImages] = useState([]); // Only trashed images\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch images when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const imageResponse = await axios.get('http://localhost:5000/api/images');\n        setImages(imageResponse.data);\n        setFilteredImages(imageResponse.data.filter(image => image.trashed === true)); // Filter only trashed images\n      } catch (err) {\n        setError('Failed to fetch data');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []); // No dependency, this will run once on mount\n\n  // Handle image click\n  const handleCardClick = (type, id) => {\n    if (type === 'image') {\n      navigate(`/images/${id}`);\n    }\n  };\n\n  // Handle trash click - update trashed status in the database\n  const handleRemoveFromTrash = async id => {\n    try {\n      await axios.put(`http://localhost:5000/api/images/${id}/trash`, {\n        trashed: false\n      });\n      setImages(images.filter(image => image._id !== id)); // Remove image from the all images list\n      setFilteredImages(filteredImages.filter(image => image._id !== id)); // Remove it from the filtered trashed images list\n    } catch (err) {\n      console.error('Error removing image from trash:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-page\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        setView: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-content\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 23\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), filteredImages.length > 0 ? filteredImages.map(image => /*#__PURE__*/_jsxDEV(ImageCardTrash, {\n          type: \"image\",\n          data: image,\n          onClick: () => handleCardClick('image', image._id),\n          onRemoveFromTrash: handleRemoveFromTrash // Pass the handleRemoveFromTrash handler\n        }, image._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No trashed images found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(TrashPage, \"1+2lkp9W23OBybbl/CEBimtHayM=\", false, function () {\n  return [useNavigate];\n});\n_c = TrashPage;\nexport default TrashPage;\nvar _c;\n$RefreshReg$(_c, \"TrashPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Navbar","Sidebar","ImageCardTrash","jsxDEV","_jsxDEV","TrashPage","_s","images","setImages","filteredImages","setFilteredImages","loading","setLoading","error","setError","navigate","fetchData","imageResponse","get","data","filter","image","trashed","err","console","handleCardClick","type","id","handleRemoveFromTrash","put","_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","setView","length","map","onClick","onRemoveFromTrash","_c","$RefreshReg$"],"sources":["C:/Users/Mehdi/Desktop/Gallery Organizer/ai-image-gallery/frontend/src/pages/TrashPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Navbar from '../components/NavbarGallery';\r\nimport Sidebar from '../components/SidebarFav';\r\nimport ImageCardTrash from '../components/ImageCardTrash'; // Import ImageCardTrash component\r\nimport '../styles/Gallery.css';\r\n\r\nconst TrashPage = () => {\r\n  const [images, setImages] = useState([]); // All images\r\n  const [filteredImages, setFilteredImages] = useState([]); // Only trashed images\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch images when the component mounts\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const imageResponse = await axios.get('http://localhost:5000/api/images');\r\n        setImages(imageResponse.data);\r\n        setFilteredImages(imageResponse.data.filter(image => image.trashed === true)); // Filter only trashed images\r\n      } catch (err) {\r\n        setError('Failed to fetch data');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // No dependency, this will run once on mount\r\n\r\n  // Handle image click\r\n  const handleCardClick = (type, id) => {\r\n    if (type === 'image') {\r\n      navigate(`/images/${id}`);\r\n    }\r\n  };\r\n\r\n  // Handle trash click - update trashed status in the database\r\n  const handleRemoveFromTrash = async (id) => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/images/${id}/trash`, { trashed: false });\r\n      setImages(images.filter(image => image._id !== id));  // Remove image from the all images list\r\n      setFilteredImages(filteredImages.filter(image => image._id !== id));  // Remove it from the filtered trashed images list\r\n    } catch (err) {\r\n      console.error('Error removing image from trash:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery-page\">\r\n      <Navbar />\r\n      <div className=\"main-content\">\r\n        <Sidebar setView={() => {}} /> {/* Sidebar with no view change */}\r\n        <div className=\"gallery-content\">\r\n          {loading && <p>Loading...</p>}\r\n          {error && <p>{error}</p>}\r\n          {filteredImages.length > 0 ? (\r\n            filteredImages.map((image) => (\r\n              <ImageCardTrash\r\n                key={image._id}\r\n                type=\"image\"\r\n                data={image}\r\n                onClick={() => handleCardClick('image', image._id)}\r\n                onRemoveFromTrash={handleRemoveFromTrash}  // Pass the handleRemoveFromTrash handler\r\n              />\r\n            ))\r\n          ) : (\r\n            <p>No trashed images found.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrashPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}